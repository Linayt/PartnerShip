//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/ProjectAsset/Scripts/SpaceShip/SpaceShipInputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SpaceShipInputMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SpaceShipInputMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SpaceShipInputMap"",
    ""maps"": [
        {
            ""name"": ""ShipMovement"",
            ""id"": ""9729eb42-82ab-4b9c-9e04-ceb3f9a70788"",
            ""actions"": [
                {
                    ""name"": ""Thruster"",
                    ""type"": ""Value"",
                    ""id"": ""4aca63be-87db-48be-8e6d-a501182bdd78"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Hover"",
                    ""type"": ""Value"",
                    ""id"": ""95bbc35a-12d4-42f7-afc7-611834ccb75d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Value"",
                    ""id"": ""0c90d6e9-b899-4078-b5e4-7f61ed3693ff"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""9dfb2d18-2350-4f68-9c11-f924464683b8"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thruster"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8e97625e-17de-4c62-91ea-817102f73e0a"",
                    ""path"": ""<Mouse>/forwardButton"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(max=1)"",
                    ""groups"": """",
                    ""action"": ""Thruster"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""fadcd0b4-e52b-4e85-ab5c-b156b7bbd5e1"",
                    ""path"": ""<Mouse>/backButton"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(min=-1)"",
                    ""groups"": """",
                    ""action"": ""Thruster"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""71aadc41-201a-4334-96db-9bee282fc9f3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""64423d0d-76f0-4784-b217-42b73d60ca15"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(min=-1)"",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ede2a9b8-c60b-42a9-a5e4-97dd7776cbc4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(max=1)"",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""24181cb5-0faf-4ea9-bab2-96c234446305"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hover"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cd994b9b-37ab-4737-a47c-2a2420985ab8"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cf6b378a-af3d-4613-b65e-184968f86f59"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""92a0a9e6-1fab-4e2c-b899-854cf94bda77"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d5053376-ba20-43e0-bcdb-8f68a25601f8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ShipMovement
        m_ShipMovement = asset.FindActionMap("ShipMovement", throwIfNotFound: true);
        m_ShipMovement_Thruster = m_ShipMovement.FindAction("Thruster", throwIfNotFound: true);
        m_ShipMovement_Hover = m_ShipMovement.FindAction("Hover", throwIfNotFound: true);
        m_ShipMovement_Roll = m_ShipMovement.FindAction("Roll", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ShipMovement
    private readonly InputActionMap m_ShipMovement;
    private IShipMovementActions m_ShipMovementActionsCallbackInterface;
    private readonly InputAction m_ShipMovement_Thruster;
    private readonly InputAction m_ShipMovement_Hover;
    private readonly InputAction m_ShipMovement_Roll;
    public struct ShipMovementActions
    {
        private @SpaceShipInputMap m_Wrapper;
        public ShipMovementActions(@SpaceShipInputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Thruster => m_Wrapper.m_ShipMovement_Thruster;
        public InputAction @Hover => m_Wrapper.m_ShipMovement_Hover;
        public InputAction @Roll => m_Wrapper.m_ShipMovement_Roll;
        public InputActionMap Get() { return m_Wrapper.m_ShipMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShipMovementActions set) { return set.Get(); }
        public void SetCallbacks(IShipMovementActions instance)
        {
            if (m_Wrapper.m_ShipMovementActionsCallbackInterface != null)
            {
                @Thruster.started -= m_Wrapper.m_ShipMovementActionsCallbackInterface.OnThruster;
                @Thruster.performed -= m_Wrapper.m_ShipMovementActionsCallbackInterface.OnThruster;
                @Thruster.canceled -= m_Wrapper.m_ShipMovementActionsCallbackInterface.OnThruster;
                @Hover.started -= m_Wrapper.m_ShipMovementActionsCallbackInterface.OnHover;
                @Hover.performed -= m_Wrapper.m_ShipMovementActionsCallbackInterface.OnHover;
                @Hover.canceled -= m_Wrapper.m_ShipMovementActionsCallbackInterface.OnHover;
                @Roll.started -= m_Wrapper.m_ShipMovementActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_ShipMovementActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_ShipMovementActionsCallbackInterface.OnRoll;
            }
            m_Wrapper.m_ShipMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Thruster.started += instance.OnThruster;
                @Thruster.performed += instance.OnThruster;
                @Thruster.canceled += instance.OnThruster;
                @Hover.started += instance.OnHover;
                @Hover.performed += instance.OnHover;
                @Hover.canceled += instance.OnHover;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
            }
        }
    }
    public ShipMovementActions @ShipMovement => new ShipMovementActions(this);
    public interface IShipMovementActions
    {
        void OnThruster(InputAction.CallbackContext context);
        void OnHover(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
    }
}
